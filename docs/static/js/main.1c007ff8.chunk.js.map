{"version":3,"sources":["components/AddCategory.js","herlpers/GetGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categories","type","value","onChange","target","handleChange","GetGif","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGif","GifExpertApp","key","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAY5C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,IACAF,GAAc,SAAAO,GAAU,OAAKL,GAAL,mBAAoBK,OAC5CJ,EAAc,MAKlB,SACI,uBACIK,KAAK,OACLC,MAAOP,EACPQ,SAAU,SAACL,GAAD,OAdD,SAACA,GAAD,OAAOF,EAAcE,EAAEM,OAAOF,OActBG,CAAaP,S,+BCpBjCQ,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,0FAC6EC,UAAUH,GADvF,sBAEKI,MAAMF,GAFX,cAEZG,EAFY,gBAGKA,EAASC,OAHd,uBAGVC,EAHU,EAGVA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARxB,kBAWXM,GAXW,4CAAH,sDCENO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACrC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAd,SAACA,GAAc,IAAD,EACXb,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAkBrC,OAZAC,qBAAU,WACNxB,EAAOC,GACFwB,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDjB0BO,CAAY5B,GAAhCa,EADwB,EAC7BN,KAAaa,EADgB,EAChBA,QACrB,OACI,qCACI,6BAAKpB,IACJoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACKH,EAAOJ,KAAI,SAACC,GAAD,OAAS,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEP9CkB,EAAe,WAAO,IAAD,EACM1C,mBAAS,CAAC,cADhB,mBACvBM,EADuB,KACXP,EADW,KAG9B,OACI,gCACI,oBAAI8B,UAAU,oCAAd,4BACA,cAAC,EAAD,CAAa9B,cAAeA,IAC5B,uBACA,6BACKO,EAAWgB,KAAI,SAACT,EAAU8B,GAAX,OAAmB,cAAC,EAAD,CAAmB9B,SAAUA,GAAf8B,YCRjEC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1c007ff8.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState('')\n    const handleChange = (e) => setInputValue(e.target.value)\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (inputValue) {\n            setCategories(categories => [inputValue, ...categories])\n            setInputValue('')\n        }\n    }\n    \n    return (  \n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={(e) => handleChange(e)}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const GetGif = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=WQLOQJgfus3yNoXwQw4zKX7ymJLuXdHY&q=${encodeURI(category)}&limit=10`;\n    const response = await fetch(url);\n    const { data } = await response.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGif } from \"../hooks/useFetchGif\";\nimport { GifGridItem } from \"./GifGridItem\";\nexport const GifGrid = ({ category }) => {\n    const { data:images, loading } = useFetchGif(category);\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n            <div className=\"card-grid\">\n                {images.map((img) => <GifGridItem key={img.id} {...img} />)}\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport { GetGif } from \"../herlpers/GetGif\";\n\nexport const useFetchGif = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        GetGif(category)\n            .then(imgs => {\n                console.log(imgs)\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            })\n\n    }, [category])\n\n    return state\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from \"./components/GifGrid\";\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState([\"One Punch\"])\n\n    return (\n        <div>\n            <h2 className=\"animate__animated animate__fadeIn\">Gif Expert App</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            <ol>\n                {categories.map((category, key) => <GifGrid key={key} category={category} />)}\n            </ol>\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}